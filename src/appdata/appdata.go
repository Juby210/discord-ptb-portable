// Code generated by go-bindata.
// sources:
// data/tray-connected.png
// data/tray-deafened.png
// data/tray-muted.png
// data/tray-speaking.png
// data/tray-unread.png
// data/tray.png
// DO NOT EDIT!

package appdata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataTrayConnectedPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x14\x01\xeb\xfe\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x10\x00\x00\x00\x10\x08\x03\x00\x00\x00\x28\x2d\x0f\x53\x00\x00\x00\x45\x50\x4c\x54\x45\x00\x00\x00\x3b\x89\x62\x2f\x7e\x58\x2f\x7d\x5a\x2e\x7c\x58\x2e\x7c\x59\x2f\x7d\x59\x31\x87\x61\x3b\x9d\x6f\x42\xad\x7e\x2f\x7d\x5a\x3a\x9a\x6e\x44\xb4\x82\x62\xc0\x96\xa6\xdb\xc3\xab\xdd\xc7\x84\xce\xac\xa8\xdd\xc5\x53\xbb\x8b\x2f\x7e\x59\x65\xc3\x98\xa7\xdb\xc4\xac\xde\xc6\x67\x09\x6a\x9f\x00\x00\x00\x17\x74\x52\x4e\x53\x00\x0d\x82\xd4\xf5\x42\xe3\xbf\x87\x6d\xeb\x8d\x66\x72\x95\x97\x81\x96\x6c\xd5\x72\x96\x99\x54\x54\xba\x85\x00\x00\x00\x67\x49\x44\x41\x54\x78\x01\x65\x8a\x85\x15\x03\x31\x0c\xc5\x14\x28\xf3\xfe\x3b\x96\x99\xdc\xfc\xb8\x7c\x0a\x4a\xcf\xfc\x13\xea\x55\xc0\x0a\x40\x04\x5a\x6f\x14\xdc\x73\x4a\xd9\x4b\xf4\xf9\x10\x13\xfe\xcb\xd4\x3b\x84\x33\xb5\x58\x64\x16\xe8\x86\x8b\x5c\x85\xc8\x2a\xe8\xe5\x13\xf4\x9e\x79\x13\x99\x18\xfb\x97\x99\x95\xb0\x30\x97\x77\x30\xb3\xb7\x7b\x78\x17\xf3\xc0\xa5\x70\xbd\xdd\xae\x7a\x51\x50\x19\xc8\xe4\x4d\x1e\xa6\x1d\x35\x24\x4c\x8a\x6b\x7f\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x1d\xbe\x92\xb8\x14\x01\x00\x00")

func dataTrayConnectedPngBytes() ([]byte, error) {
	return bindataRead(
		_dataTrayConnectedPng,
		"data/tray-connected.png",
	)
}

func dataTrayConnectedPng() (*asset, error) {
	bytes, err := dataTrayConnectedPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tray-connected.png", size: 276, mode: os.FileMode(438), modTime: time.Unix(1510364151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTrayDeafenedPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x2d\x01\xd2\xfe\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xff\x61\x00\x00\x00\xf4\x49\x44\x41\x54\x78\x01\x63\xa0\x09\xf8\xff\xff\xbf\x2c\x10\x17\x03\xf1\x5c\x10\x86\xb2\x65\x88\xd5\x9c\x0e\xc4\x5f\x80\xf8\x2b\x10\x1f\x05\xe2\x23\x50\xf6\x67\x20\xce\x00\x62\x46\x0c\x4d\x1f\xdc\xdd\xe7\x7e\xf4\xf0\x88\x01\x4a\x0a\x03\xf1\x15\x20\xae\x03\x62\x16\x24\x43\x59\xa1\x62\xbf\x80\xb8\x19\xc3\x80\x8f\x9e\x9e\xd1\x1f\xdd\xdd\x7f\x41\x0d\x61\xc2\xe3\xba\x24\x20\xfe\x03\xc4\xa6\x18\x92\xdf\x7a\x7b\x27\x81\x0c\x01\xe2\x58\x02\x5e\x3c\x0c\xc4\xeb\xb1\x49\xdc\xfc\x3e\x69\xd2\x0c\x0c\x43\x30\xd5\x35\x00\xf1\x2b\x6c\x12\x7f\x81\x38\x0c\xea\x1d\x84\x21\x98\xea\x22\x80\xf8\x1f\xa6\x04\x04\xf4\x01\x71\xe8\xb7\xee\xee\x7e\x74\x43\x40\xe2\x50\xdc\x07\x52\x88\x69\x00\x1a\x40\x76\x09\xcc\x8b\x30\x39\x02\x06\x20\x14\x20\x1b\x02\x14\x92\x02\x19\x42\x92\x01\x58\x0c\x91\x04\x19\x82\xcb\x80\xdf\xe8\x06\xe0\x31\x64\x13\x36\x03\xba\x40\x89\x04\x97\x13\x7f\xac\x5a\x75\x04\xc9\x10\x26\x32\xb2\x18\xc2\x25\x9f\x3d\x3d\x43\xc8\xce\xa9\x9f\xbd\xbc\x82\xbf\xf9\xfb\xcb\xc2\xf8\x00\xcc\x1a\x6a\x50\x8f\xa2\xc4\x2d\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x82\xce\xbb\xe7\x2d\x01\x00\x00")

func dataTrayDeafenedPngBytes() ([]byte, error) {
	return bindataRead(
		_dataTrayDeafenedPng,
		"data/tray-deafened.png",
	)
}

func dataTrayDeafenedPng() (*asset, error) {
	bytes, err := dataTrayDeafenedPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tray-deafened.png", size: 301, mode: os.FileMode(438), modTime: time.Unix(1510364151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTrayMutedPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x1f\x01\xe0\xfe\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xff\x61\x00\x00\x00\xe6\x49\x44\x41\x54\x78\x01\x63\x18\x3c\xe0\x8b\x97\x97\xc4\xff\x86\x06\x16\x18\xff\xff\xff\xff\x9e\x40\xfc\x18\x8a\x3d\x09\x1a\xf0\xc1\xc3\xe3\xc0\x47\x0f\x8f\x95\x30\x43\xc0\x1a\x11\xe0\x31\x41\x03\xbe\xfb\xfa\x2a\x7e\x70\x77\x7f\x08\x33\x04\xa8\x69\xce\x7f\x24\x00\x52\x43\x8e\x21\xb3\x91\x0d\xa0\xc8\x10\x90\x1c\x49\x86\x7c\xf4\xf6\x7e\x8a\x64\xc8\x2c\xa2\x34\x02\x15\x3e\x83\xba\x58\xfe\xdf\xe3\xc7\x57\x3f\xfa\xfa\xbe\x40\x32\x44\x0a\x2a\xf7\x0e\x9f\x01\x6b\xa0\x8a\xaa\x41\x51\xf7\xef\xe9\xd3\x87\x1f\x03\x02\xde\x80\x0d\x79\xff\x5e\x1e\x28\xb6\x1f\x88\xd7\xe3\x33\x40\x0d\x88\xbf\x03\xf1\x1f\x20\xce\x04\x62\xa6\x9f\x0d\x0d\x7a\x1f\xbc\xbc\x9e\x7c\xf2\xf2\x5a\x05\x75\x09\x37\x21\x6f\xd8\x22\x79\xe5\x3e\x10\xaf\xfa\xf7\xe8\xd1\x89\x8f\x61\x61\x5f\x61\x86\x10\x13\x16\x1c\x40\x1c\x80\x94\x0c\x12\x7f\xcf\x9d\x6b\x83\x1c\x3b\xc4\x05\x2a\x14\x60\x44\xb1\xbb\xfb\x52\x32\x0c\x40\x18\xf2\xc9\xd3\x33\x80\x6a\x99\x10\x00\xe2\x92\x1f\x34\xe9\xb7\xcc\xd2\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\x7f\xfd\x4c\x36\x1f\x01\x00\x00")

func dataTrayMutedPngBytes() ([]byte, error) {
	return bindataRead(
		_dataTrayMutedPng,
		"data/tray-muted.png",
	)
}

func dataTrayMutedPng() (*asset, error) {
	bytes, err := dataTrayMutedPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tray-muted.png", size: 287, mode: os.FileMode(438), modTime: time.Unix(1510364151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTraySpeakingPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x10\x00\x61\x0e\x66\x06\x06\x06\x0d\x5d\xfe\x60\x06\x06\x06\x9b\x00\x9f\x10\x57\x06\x06\x06\xbf\x23\x9d\x6e\xdb\x9a\x9d\xb7\x35\x39\x6f\x6d\x74\xde\xd2\xe4\xbc\xad\xd1\x65\x5b\xa3\xf3\xb6\x46\x10\x77\x6b\xa3\xf7\x8e\xb6\x90\xdd\x3d\x59\x47\x66\x77\x5c\x58\xdf\x09\x42\x1b\xba\x2e\x6e\xe8\xbe\xb8\xb1\xf7\xd2\x26\xe7\xd3\xf9\x77\x19\x18\x18\xb8\x4a\x82\xfc\x82\x19\x78\x9d\x5a\xef\xde\x7b\xf9\xe5\xfb\x8f\x28\xdb\x97\x37\x19\x18\x18\x12\x3d\x5d\x1c\x43\x2a\xe2\x72\xcf\x7b\xf3\x1d\x36\xe0\x60\xb8\x98\x94\xc3\x34\xf9\x4b\xfd\xff\xdd\x62\x5b\x23\xba\xb4\xf6\xcf\x4d\x67\xfc\xb1\x49\xe5\x96\xf2\xae\x53\x3c\x67\xe7\x3c\xb9\xf6\x6a\x6f\xe0\xb6\x7c\x41\xe6\xbe\xdb\xdd\x29\x93\x1c\x65\xd7\xf5\xcf\x6d\xc9\x6e\x63\x3c\x3e\xf9\x92\x31\xcb\x9d\x72\xaf\x3f\x87\x66\x17\x4b\xcc\xf9\x22\x65\xb5\xf3\xda\xad\x93\x4f\xfe\x6f\x78\xfa\xd2\xb3\xe4\xca\x73\x31\x3b\x01\x4d\xd6\x1d\x1f\xaf\x9e\xec\x64\x60\x60\x60\xf0\x74\xf5\x73\x59\xe7\x94\xd0\x04\x08\x00\x00\xff\xff\x4d\xf0\x84\x83\xf8\x00\x00\x00")

func dataTraySpeakingPngBytes() ([]byte, error) {
	return bindataRead(
		_dataTraySpeakingPng,
		"data/tray-speaking.png",
	)
}

func dataTraySpeakingPng() (*asset, error) {
	bytes, err := dataTraySpeakingPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tray-speaking.png", size: 248, mode: os.FileMode(438), modTime: time.Unix(1510364151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTrayUnreadPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x10\x00\x61\x0e\x36\x06\x06\x06\xf9\xcf\xff\x13\x19\x18\x18\x24\x4b\x5c\x23\x4a\x82\xf3\xd3\x4a\xca\x13\x8b\x52\x19\x1c\x53\xf2\x93\x52\x15\x3c\x73\x13\xd3\x53\x83\x52\x13\x53\x2a\x0b\x4f\xa6\xda\x30\x30\x30\x2b\x67\x86\x44\x94\x44\xf8\xfa\x58\x25\xe7\xe7\xea\x25\x82\xd4\xe8\x55\xe4\x16\x30\x80\x80\x8d\x7d\x45\x41\x62\x72\x76\x6a\x89\x42\x52\x6a\x7a\x66\x9e\xad\xd2\xfb\xdd\xfb\x95\x14\x32\x53\x6c\x95\xc2\x4d\x7d\x0d\x7c\x0b\x9c\x53\x33\x32\x3d\xaa\x8a\x52\x83\xab\xfc\x42\x92\xab\xb2\x93\x2d\x53\x94\xec\xed\x14\x6c\x2a\xac\x2a\x72\x0b\x72\x53\x4b\x12\x15\x2a\x72\x73\xf2\x8a\xad\x2a\x6c\x95\xc0\xe6\x5a\xe5\x15\x5b\x81\x84\xf5\x95\x14\xc0\x4a\x4a\xb2\x6d\x95\x20\x8e\x8a\xf0\x0d\x50\x70\xce\x2f\x4a\x55\x30\xd5\x33\xd5\x4d\x36\x30\x32\x54\x30\xb7\xd4\x33\x34\x35\xb1\x34\x34\xd4\x51\x30\x32\x30\x34\xd6\x37\x34\xd0\x37\xb2\xd4\x35\x34\xb4\x32\x31\xb7\x32\x34\x53\x80\x02\x25\x3b\x05\x9b\xa2\x94\x34\xab\x20\x17\x37\xa8\x5d\x45\x29\x69\xb6\x4a\x19\x25\x25\x05\x56\xfa\xfa\xe5\xe5\xe5\x7a\xe5\xc6\x7a\xf9\x45\xe9\xfa\x86\x96\x96\x96\xfa\x06\x46\xfa\x46\x46\xba\x45\x29\x69\xba\xc5\x95\x79\x25\x89\x15\xba\x79\xc5\xca\x30\x13\x5c\x52\x8b\x93\x8b\x32\x0b\x4a\x32\xf3\xf3\x14\x40\xfc\xc4\xa4\xfc\xd2\x12\x5b\x25\x25\x98\x17\x72\x0b\xe0\xc6\xe6\x15\x43\x83\x29\x39\x3f\x57\xbf\x22\xb1\x40\xdf\x50\xcf\x40\x1f\x49\xa1\xaf\x2f\x7e\xa5\xb9\xb9\x70\xd5\xc5\x25\x41\xa9\x69\xf8\x55\x17\x87\x54\x16\xa4\xea\x07\xa5\x16\xe7\x97\x16\x25\xa7\x06\xa5\xa6\x29\x83\x34\x17\x58\x39\x17\xa5\x26\x96\xe4\x17\x85\xe4\xe7\xe7\xc0\x42\x31\x20\x23\xbf\x24\xbf\x38\x23\xbf\x40\xc1\xd9\x59\x41\xc3\x37\x31\x39\x33\x0f\xc4\xd7\x04\x6b\xf0\xf5\xb5\xf2\xcc\x2b\x2e\x49\xcc\x4b\x4e\xf5\x74\xb1\x55\xaa\xc8\x2d\xd0\xcb\xcc\x4c\xb1\x32\x30\x72\x31\x35\x77\xb5\xb4\x70\x71\xb3\x34\x30\x34\x74\x35\x71\x34\x30\x71\x72\x76\x32\x77\x76\x76\x31\x30\x30\x32\x77\x35\x81\xe9\x75\xc9\x4f\x2e\xcd\x4d\xcd\x2b\x81\xe9\x4d\x41\xe8\xb5\xc4\xa9\x17\x94\x16\x20\xba\x53\x8b\x32\xcb\x52\x53\xdc\x8a\xf2\x73\x15\xc0\x7e\xb6\xca\xc4\xed\x16\x33\xdc\x6e\x81\xe8\x4d\xc1\xed\x16\x73\x9c\x7a\xf5\xed\x14\x6c\xf4\xd1\x62\x1a\x26\x14\xe4\xe2\x06\x62\xc2\xd3\xad\x9d\x02\x22\xe5\xa7\xe6\xa5\xd8\x2a\x15\x29\xd9\xdb\xb9\x06\x94\xc5\x32\x30\x30\x5e\xf4\x74\x71\x0c\xa9\xb8\x75\x24\xd8\xd6\xc3\x29\x50\xa4\xce\x5f\xce\xed\xe3\x26\x93\x8f\xfd\xed\xcd\x42\x12\x8e\xae\x4f\xae\x2c\x73\x56\xe8\xb0\x68\x99\x9d\xe2\x1d\xed\xbc\x95\x85\x8d\xeb\xe2\xa5\x0b\x19\xdd\xbd\x8d\xab\x67\x7b\x2a\x5c\x9a\x22\xa8\x92\xa8\xd0\x65\xaf\xb9\x34\xd8\x6e\xeb\x87\x99\xfb\xce\x4d\x2c\x77\x74\x51\x5a\x6e\xf7\xa3\xe2\xfb\xbc\xdf\xb5\xcf\xe7\x55\xbf\xaf\x34\xf9\xea\x2e\x33\x6f\x7f\x4f\xef\xe9\x15\x27\x13\x58\xee\x31\xcc\xbe\x74\xdd\xa3\x9f\x63\x5a\x43\xda\x03\x93\x0d\x7c\x73\x98\xba\x1c\x18\x57\xdc\xff\xac\xde\x77\xd3\xf2\xed\xa9\x09\x76\x8e\x42\x06\x0e\xbb\xef\xbf\xbf\xbf\xf5\x66\x8e\x5a\xab\x93\xe1\xe4\xd3\x4f\x5f\xe9\x9c\x3e\xe5\x1a\xb8\xe4\xd6\xdb\xb2\xe3\x49\x1b\x25\xd6\xe5\x3f\xed\xde\x6b\x67\x1b\xb3\xd5\x41\x28\xa7\xed\xf0\x43\xe1\xf5\xd7\xb3\xdf\x33\x3f\x69\x28\xfc\xda\xae\xb4\xb4\xee\xdf\x57\x6f\xb3\x28\xc6\xb3\x06\x3e\x0b\xc2\x56\xbf\x5d\x1d\xb2\xea\xe7\x7d\xbd\x07\xcd\xef\x83\x26\xde\xb0\x0e\x5d\x53\xd7\xf5\x75\xbb\x53\x62\xd8\xca\xed\xfc\x7a\xc7\x9e\x7f\x8e\xed\x14\x66\xb2\x7d\x71\xb4\xe8\x0c\x5f\xfb\x61\x97\xb2\x83\xca\x47\x1e\x7f\xfc\x5d\xb4\x33\x46\x75\x63\x8e\x59\xb4\x87\xda\xe4\xfe\xc3\x57\x3d\xe4\xf6\x14\x9c\x62\x17\x0f\x53\x99\x19\xbc\xf2\x8a\xf1\x91\x6d\x6b\xc3\x5e\xb3\x9e\x33\x5c\x18\xb4\xd2\xa6\xf5\x06\x9f\x9a\x92\xd5\x97\x05\xe2\xda\x01\xaf\x4b\xac\x4c\x4f\x9e\x29\x9c\x73\x2c\xc1\x60\x8d\xf5\x5c\x3f\xbe\xe7\x26\x07\x1e\x7f\x2c\xf8\xc0\x75\x5a\xaa\x37\xad\xf1\x85\xca\xf9\x03\xe2\x0a\x91\xd5\x7b\xe3\xe6\xbf\xb1\xaa\x4a\x13\x52\x96\x62\xa9\xda\xd8\xe4\xb5\x32\x64\xd5\xa4\xcf\xe9\x46\x33\x6b\xac\xe6\x9e\x33\x93\xe2\x9d\xc7\x31\xfb\x6c\x1a\xf7\x23\xcb\x98\xdf\x6c\x0b\xc2\x3e\x85\x14\xec\x59\x76\x35\xeb\xfc\xa2\x8b\x2f\x64\xcf\x7f\xd6\x75\x14\xd8\x95\xb7\xfd\xb7\xd0\x23\xf6\x0b\x7c\x8e\x15\x8f\x14\x7a\xfa\x63\xf4\xc2\x39\xae\x07\x34\x47\x7d\x59\x30\xdd\x44\x68\xdf\x7e\xd1\x1d\x5a\x5b\xdf\x33\x1b\xa8\xfd\xd5\x5e\x74\x44\xf7\x01\xdb\x06\xe6\x1a\xa6\x65\x1b\x4c\x57\xd4\x1f\xef\x67\x60\x66\xd8\x1f\x62\xd3\x96\x9e\x95\x20\x04\x2a\xf1\x3c\x5d\xfd\x5c\xd6\x39\x25\x34\x01\x02\x00\x00\xff\xff\x29\xcb\xee\x3e\x5e\x05\x00\x00")

func dataTrayUnreadPngBytes() ([]byte, error) {
	return bindataRead(
		_dataTrayUnreadPng,
		"data/tray-unread.png",
	)
}

func dataTrayUnreadPng() (*asset, error) {
	bytes, err := dataTrayUnreadPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tray-unread.png", size: 1374, mode: os.FileMode(438), modTime: time.Unix(1510364256, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTrayPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x94\x7f\x4c\x13\xf7\x1b\xc7\x4f\xf8\x42\x8c\xd1\xaf\x98\x25\x73\x32\x9c\xe7\x69\x1c\xce\xd1\xfb\x41\x4b\xd7\xa3\x3f\x06\x77\x2d\x6d\xa0\xa4\x14\x12\x19\x33\xc4\xa3\xf7\x69\x7b\xe0\xfd\xd8\xf5\x4a\xaf\x64\x8a\x74\xee\x17\x89\x02\x81\xc9\x9c\x0b\x93\x18\x1d\x38\xd9\x10\x83\x93\x38\x47\x5c\x26\x0c\x70\x2c\xb0\x04\x96\xf1\x07\xc4\x4d\x98\xdb\x18\x24\x2e\xcb\xd0\x04\x97\x02\xc5\x65\x41\x3f\xc9\x25\xf7\x3c\x79\xbf\x9e\x7b\x3f\xcf\x3d\xf9\xbc\xeb\xca\xcf\xd9\xb4\x21\x79\x03\x04\x41\x9b\x1c\x76\xda\x0d\x41\x50\x52\xf4\x59\x9f\x08\x41\xd0\x8e\x7b\x0f\x19\x08\x82\xb6\x29\xd6\x62\xa5\x50\xf4\x2a\x21\x46\x06\x50\x16\x2b\x96\x01\xd8\xc1\x33\x3e\xe0\x06\x0c\x1b\x7e\x6d\x00\x18\x21\x28\x7e\x17\x57\x54\xac\x14\x3b\xf3\x48\x8f\xc8\x6b\x98\xa8\x46\xa3\xf2\x12\x14\x3d\x46\x8b\x2a\x31\x9e\x0a\xa0\xc0\x65\xc0\xc7\x09\x26\x64\xee\x5a\x2f\x02\x73\xac\x09\xd9\xaf\x73\x62\x4e\x89\x02\x7e\xce\x5e\x25\x83\xc2\xaa\xfc\x22\x4f\x55\x85\xc7\xc0\x22\x16\x33\x6c\x54\x49\x95\x97\x78\xa0\x30\xb0\xca\x1f\x12\x02\xa4\x6a\x42\x96\xea\x92\x42\x80\x8c\xa6\x51\x04\x5e\x92\x28\x15\x26\x64\xd9\x54\xb1\xd3\x05\x53\xa2\x0c\x60\x9d\x46\x97\xe6\xc1\x08\x1c\xd6\x1b\x34\xb8\x4e\x6b\xc0\xf1\x17\x61\x02\xc3\xd3\x51\x1c\x43\x09\x43\x1a\x8e\x93\x5a\x3d\x89\x67\xc0\x2b\x07\x31\xc3\x46\x99\xf5\x92\x6e\xda\xb6\xf2\x2d\x99\xf5\x9a\x10\xbf\xa2\x48\x24\x8a\x86\x42\x21\x4d\x28\x5d\x23\xca\x3e\x14\x37\x18\x0c\x28\x46\xa0\x04\x91\x26\xb3\xde\xb4\x40\x58\x50\x18\x35\x4d\x08\xec\x8a\x55\xa0\x41\xc0\x23\x73\x92\xc2\x89\x02\x1c\x8d\x99\x32\x31\xa8\x98\x10\x24\xd6\x02\x2f\xad\x96\x15\x02\x2b\x63\xf2\x88\x3c\xaa\x32\x12\x8a\x6b\x30\xf4\x5f\x42\xa7\xf3\xc9\x52\x9e\x5f\x55\x07\x14\x37\xf0\x3e\x59\x1d\x28\x0a\x4b\x00\x75\x83\x80\x18\x94\x3d\xc0\x0d\xbc\xbb\xa2\xb0\x44\x52\x32\x60\x14\x51\x2e\x12\xc5\x43\xb1\x29\xba\xfc\xa2\x22\x06\xfc\xa2\x04\x53\x14\x9c\xea\x64\x3c\x9c\x10\x8d\xf7\x2e\x01\x4e\x27\xe9\x10\x02\x0a\x23\x78\x80\x83\x36\x21\x2a\x2f\x69\x38\x8e\x25\x31\x82\xd6\xe9\xad\x06\x2d\x6d\x33\x60\x38\x6e\xd5\x66\x61\xda\x6c\x2a\x5b\x4f\x51\x34\x86\x11\x7a\xab\x36\xc6\xd2\xa2\x27\xc8\x03\x41\x89\xb1\xec\x23\x56\xf7\x58\x36\xba\x0b\xcb\x34\x90\xb9\x4a\xc0\xda\x64\x91\x87\x97\x7a\x26\xb9\x35\xbc\x50\xd9\x56\x1b\x46\x60\xd9\xb4\x0d\x23\xd6\xf6\xb2\xcc\xb2\x6b\x78\x59\x61\xa9\xc7\xb2\xa8\x19\x36\xa2\xff\xf9\xd3\xb1\x94\x9b\xb6\x45\x5f\x57\xf7\xd6\x0c\x3f\xda\x7c\x20\xb0\x26\x44\x46\x2c\x66\xe3\xe5\xdc\x3e\x08\x5a\xd7\xee\xa0\xb3\x8a\xd4\x1f\xbf\x6e\xec\xcd\x8d\x63\x9e\xe9\x47\x0d\x9a\x0d\x0d\xda\x82\xcc\x61\xeb\xd6\xb3\xad\xef\x08\xe5\x97\x77\x26\xd1\x29\x5f\x39\xda\x16\x8f\xf9\x15\x7b\xfd\x58\x5f\x49\xca\xfd\xad\x1f\xbe\xa0\xe7\x7e\x45\xec\xa3\x53\x57\x53\xad\x5b\xb3\x06\x0b\x6f\x64\x56\x1f\x98\xcc\xf9\xe3\x78\x52\x24\xa3\x77\x7e\xcb\x5c\xb8\x77\xb2\x7f\x7c\xe6\x70\xdd\x4f\xd3\x1d\x6f\x9e\x9a\x09\x26\x25\xe6\x9e\x49\x78\xba\x26\x21\xaf\x33\xd1\x76\x26\xae\xd4\xf7\xec\xfc\x41\xb4\x71\x20\x25\xe7\xec\x48\xfd\xd0\x9d\x92\x31\x6d\xc7\x1d\x85\x4c\x18\xea\xba\x7a\xa4\x57\xa4\x91\x2d\x23\xda\x6f\x0b\x5a\x5d\x6d\x3f\xcb\x3d\x15\x7f\xcf\xfd\xfe\x56\xe1\xec\xf4\xbd\x85\xd3\x3b\xd9\x97\xc7\x76\x24\x6f\x4c\xec\x53\x8d\x2d\xf5\xcd\x84\xe5\xda\x54\xd8\x3c\x21\x7c\x6e\xe9\xa8\xae\xfd\xa2\xa9\xf5\x62\xfc\x8e\x1b\x0a\xb9\xfd\x4f\xd5\xb8\xef\xe1\xf6\x94\xf0\x5e\xea\x95\xf2\xa4\x13\x37\xcb\x76\x5e\x79\xa9\xa6\xf6\xe6\x6d\xea\x7a\xa9\xd8\xf5\xc1\x85\x0b\x73\xe7\xdc\x77\xef\x86\x9e\xca\xa4\xe2\x67\x4e\x60\x9d\x9b\xaf\x98\xac\x05\xa5\xae\xcc\x7a\xb0\x10\x69\x69\x6f\x9d\x98\x1d\x6e\xad\xb4\x1f\x7f\xbf\x8e\x68\x3a\xb7\x5d\x8d\xaf\x39\xda\x1c\x3c\xb9\x7b\xe0\xf9\xda\xdb\x95\xc6\xe7\x9a\xcf\xc7\x47\xdc\xed\x4d\xc7\x0a\x7f\x98\x5f\x78\xfd\x93\x5b\x3e\xdf\xf9\x9e\xf4\xb1\xf7\xf6\xdc\x3a\x12\xac\x94\x2e\xf6\x19\x77\x0f\x8e\xfe\x3f\xb9\xbb\xa4\x63\x60\xb1\xba\xbb\xe4\xf0\xbe\xe6\xa1\xf2\x8f\xbf\x1f\x39\x75\x69\x62\xf6\x2f\xd7\xb8\x9f\xff\x5f\xc3\xf8\xb0\xf6\x97\x07\x27\x27\xe7\x2c\xfd\x09\x3d\xe3\xc1\xeb\x6f\x0f\x11\x79\x7b\x1a\xf7\xb7\x7d\xb4\x3e\x52\xdf\x5d\xf7\x9b\xb6\xc1\x7e\x60\x34\x39\xfc\x4d\xee\xb6\xc1\xae\xd3\xf6\x9c\xd4\x37\x9c\x0f\xee\x9b\x23\xaf\x4e\x75\x7e\x46\x5c\xda\x5c\x79\x74\x5d\x4b\x4d\xdc\x97\xd3\x8b\x84\x3c\x19\xb7\x11\xf2\x7d\x97\x5b\x60\xc8\x08\x8f\x44\x6f\x32\x87\x35\x9f\xfe\x34\xfb\x60\xe4\x9f\x00\x00\x00\xff\xff\x1d\x29\x9f\x8f\x36\x05\x00\x00")

func dataTrayPngBytes() ([]byte, error) {
	return bindataRead(
		_dataTrayPng,
		"data/tray.png",
	)
}

func dataTrayPng() (*asset, error) {
	bytes, err := dataTrayPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tray.png", size: 1334, mode: os.FileMode(438), modTime: time.Unix(1510364256, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/tray-connected.png": dataTrayConnectedPng,
	"data/tray-deafened.png": dataTrayDeafenedPng,
	"data/tray-muted.png": dataTrayMutedPng,
	"data/tray-speaking.png": dataTraySpeakingPng,
	"data/tray-unread.png": dataTrayUnreadPng,
	"data/tray.png": dataTrayPng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"tray-connected.png": &bintree{dataTrayConnectedPng, map[string]*bintree{}},
		"tray-deafened.png": &bintree{dataTrayDeafenedPng, map[string]*bintree{}},
		"tray-muted.png": &bintree{dataTrayMutedPng, map[string]*bintree{}},
		"tray-speaking.png": &bintree{dataTraySpeakingPng, map[string]*bintree{}},
		"tray-unread.png": &bintree{dataTrayUnreadPng, map[string]*bintree{}},
		"tray.png": &bintree{dataTrayPng, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

